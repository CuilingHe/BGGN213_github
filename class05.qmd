---
title: "Class 5"
author: "Cuiling He"
format: pdf
editor: visual
---

#plotting in R

R has many plotting and visualization systems including "base" R

```{r}
head(cars, 10)
```
## A base plot
```{r  firstplot}
plot(cars)
```

Base R plots can be quite straightforward for basic plots when compared systems like ggplot.

To use an add on package, like ggplot, I have first to get it on my computer -i.e. install it!

We use the function "install.packages()" with the name of the package we wat ot install.

```{r}
library(ggplot2)
ggplot(cars) 
  
```

ggplot is much more verbose than base R plot and every single ggplot needs at least 3 things:

-   **Data** (this is the data.frame with the stuff we want to plot)
-   **Aesthetics** or aes() for short (how the data map to the pplot)
-   **Geometry ** (like geom_point(), geom_line() the polt type)

```{r}
ggplot(cars) +
  aes(x=speed, y=dist) +
  geom_point() +
  theme_classic()
```

```{r}
ggplot(cars) +
  aes(x=speed, y=dist) +
  geom_point() +
  geom_smooth(se = FALSE, method = "lm") +
  theme_classic()
```

## A plot of some gene expression data

The code to read the data"

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```


> Q. How many genes are in this dataset?

```{r}
nrow(genes)
```


There are `r nrow(genes)` genes in this dataset

> How many genes are up_regulated?

```{r}
table(genes$State)
```


```{r}
sum(genes$State == "up")
```

Let's stop messing and plot it

```{r}
p <- ggplot(genes, aes(Condition1, Condition2, color = State)) +
  geom_point()

```

I can save any ggplot object for use later so I don't need to type it all out again. Here I can add layers to `p` later on.

```{r}
p + scale_colour_manual( values=c("blue","gray","red")) +
  labs(title = "Gene expression changes upon drug treatment", subtitle = "Some title")
```




## A more comples ggplot example

one of the big wins with ggplot is how easy it is to facet your data into sub-plots..
```{r}
install.packages("gapminder")
library(gapminder)
```

Read the gapminder dataset 

```{r}
head(gapminder)
```

> How many countries are in this dataset?

```{r}
length(unique(gapminder$country))
```

> Q How many years do we have in this data?

```{r}
min(unique(gapminder$year))
max(gapminder$year)
```

```{r}
range(gapminder$year)
```

> Q Which country has the smallest population?

```{r}
min(gapminder$pop)

```

First where is this min value in the pop vector

```{r}
ind <- which.min(gapminder$pop)
```


Now use this to access the $country value for this postion

```{r}
gapminder$country[ind]
```

```{r}
gapminder[ind, ]

```


```{r}
ggplot(gapminder) +
  aes(x=gdpPercap, y=lifeExp, color = continent) +
  geom_point(alpha=0.5) +
  facet_wrap(~ continent)
```








